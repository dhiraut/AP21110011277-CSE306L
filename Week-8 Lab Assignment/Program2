Implement LALR parser using LEX and YACC for the following Grammar:

E → E+T |T
T → T*F | F
F → (E) | d

//parser.l
%{
#include "y.tab.h"
%}

%%
[0-9]+          { yylval = atoi(yytext); return d; }
[+*/()]         { return *yytext; }
\n              { return EOL; }
[ \t]           ; 
.               { yyerror("Invalid character"); }
\n               return 0;
.return yytext[0];
%%

int yywrap() {
    return 1;
}

//Parsser.y
%{
#include <stdio.h>
#include <stdlib.h>
%}

%token d
%token EOL

%%

S : E EOL    { printf("Valid expression\nResult is %d\n",$1); exit(0); }
  ;

E : E '+' T    {$$ = $1 + $3; }
  | T          {$$=$1 ;}
  ;

T : T '*' F    { $$ = $1 * $3; }
  | F          {$$=$1;}
  ;

F : '(' E ')'   { $$=( $2 ); }
  | d          { $$=$1 ; }
  ;

%%

int main() {
    yyparse();
    return 0;
}

int yyerror(const char *s) {
    printf("Error: %s\n", s);
    return 0;
}
